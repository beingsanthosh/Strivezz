#include<bits/stdc++.h>
using namespace std;
#define ll long long
int N=100000;
bool sieve[100001];

void createsieve() {
    for(int i=2; i*i<=N; i++) {
        sieve[i]=true;
    }
    for(int i=2; i*i<=N; i++) {
        if(sieve[i]==true) {
            for(int j=i*i; j<=N; j+=i) {
                sieve[j]=false;
            }
        }
    }
}

vector<int> gets(int N) {
    vector<int> v;
    for(int i=2; i<=(N); i++) {
        if(sieve[i]==true) {
            v.push_back(i);
        }
    }
    return v;
}

int main() {
    int l, r;
    cin >> l >> r;
    createsieve();
    // step 1: generate primes for sqrt(r)
    vector<int> vet = gets(sqrt(r));
    // step 2: dummy array of size(r-l+1) and every one as 1
    int arr[r - l + 1];
    for(int i = 0; i < (r - l + 1); i++) {
        arr[i] = 1;
    }
    // step 3: mark all multiples in dummy
    for(auto pr : vet) {
        int firstmultiple = (l / pr) * pr;
        if(firstmultiple < l) firstmultiple = firstmultiple + pr;
        for(int j = max(firstmultiple, pr * pr); j <= r; j += pr) {
            arr[j - l] = 0;
        }
    }
    // step 4: get all primes
    for(int i = l; i <= r; i++) {
        if(arr[i - l] == 1) {
            cout << i << " ";
        }
    }

    return 0;
}
